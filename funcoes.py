from collections import deque
import random
import time
import tracemalloc

# -------------------------
# M√≥dulo: simula√ß√£o de consumo de insumos
# -------------------------
# Este m√≥dulo define:
# - a classe Insumo (registro de um insumo consumido)
# - fun√ß√µes para gerar dados simulados
# - implementa√ß√µes de fila e pilha (exibi√ß√£o)
# - buscas (sequencial e bin√°ria) com sa√≠da explicada
# - algoritmos de ordena√ß√£o (merge sort e quick sort)
# - um decorator para medir tempo e mem√≥ria das opera√ß√µes


# -------------------------
# Classe Insumo
# -------------------------
class Insumo:
    """
    Representa um insumo consumido.
    Atributos:
    - nome: nome do insumo (string)
    - quantidade: quantidade consumida (int)
    - validade: dias restantes at√© a validade (int)
    """
    def __init__(self, nome, quantidade, validade):
        self.nome = nome
        self.quantidade = quantidade
        self.validade = validade

    def __repr__(self):
        # Representa√ß√£o leg√≠vel do objeto para impress√£o
        return f"{self.nome} | Qtd: {self.quantidade} | Val: {self.validade}"


# -------------------------
# Fun√ß√µes auxiliares
# -------------------------
def gerar_consumo():
    """
    Gera uma lista de objetos Insumo com valores aleat√≥rios.
    Retorna uma lista com 10 entradas por padr√£o.
    """
    nomes_insumos = ["Reagente A", "Reagente B", "Reagente C", "Descartavel X", "Descartavel Y"]
    return [
        # random.choice escolhe um nome aleat√≥rio da lista;
        # random.randint gera quantidade e validade aleat√≥rias.
        Insumo(random.choice(nomes_insumos), random.randint(1, 50), random.randint(1, 30))
        for _ in range(10)
    ]


def mostrar_lista(lista):
    """
    Imprime cada item da lista em uma linha.
    √ötil para exibir o conte√∫do atual (lista de insumos).
    """
    for item in lista:
        print(item)


# -------------------------
# Decorador: medir performance
# -------------------------
def medir_performance(func):
    """
    Decorator que mede tempo de execu√ß√£o e uso de mem√≥ria da fun√ß√£o decorada.
    - usa tracemalloc para medir mem√≥ria alocada durante a execu√ß√£o
    - usa time.perf_counter() para medir tempo com alta resolu√ß√£o
    Ao final, imprime o tempo e a mem√≥ria (atual e pico).
    """
    def wrapper(*args, **kwargs):
        tracemalloc.start()                      # inicia rastreamento de mem√≥ria
        inicio_tempo = time.perf_counter()       # marca o tempo inicial

        resultado = func(*args, **kwargs)       # executa a fun√ß√£o decorada

        fim_tempo = time.perf_counter()         # marca o tempo final
        memoria_atual, memoria_pico = tracemalloc.get_traced_memory()
        tracemalloc.stop()                      # para o rastreamento de mem√≥ria

        # imprime m√©tricas de performance
        print(f"\n‚è± Tempo de execu√ß√£o: {fim_tempo - inicio_tempo:.6f} s")
        print(f"üíæ Mem√≥ria usada: {memoria_atual / 1024:.2f} KB | Pico: {memoria_pico / 1024:.2f} KB")
        return resultado
    return wrapper


# -------------------------
# FILA
# -------------------------
@medir_performance
def mostrar_fila(consumo_diario):
    """
    Demonstra comportamento de FILA (FIFO).
    - cria um deque a partir da lista de consumo
    - vai 'retirando' elementos com popleft (ordem cronol√≥gica)
    """
    fila = deque(consumo_diario)  # deque permite popleft eficiente
    print("\n--- FILA (Ordem cronol√≥gica) ---")
    while fila:
        # cada popleft representa o pr√≥ximo consumido (mais antigo primeiro)
        print("Consumido:", fila.popleft())


# -------------------------
# PILHA
# -------------------------
@medir_performance
def mostrar_pilha(consumo_diario):
    """
    Demonstra comportamento de PILHA (LIFO).
    - converte a lista para uma pilha (list)
    - usa pop() para retirar o √∫ltimo elemento (√∫ltimo consumo primeiro)
    """
    pilha = list(consumo_diario)
    print("\n--- PILHA (√öltimos consumos primeiro) ---")
    while pilha:
        # pop retira o √∫ltimo item inserido => LIFO
        print("Consumido:", pilha.pop())


# -------------------------
# BUSCAS (sa√≠da explicada)
# -------------------------
@medir_performance
def busca_sequencial(lista, nome):
    """
    Busca sequencial (linear) numa lista n√£o ordenada.
    Imprime informa√ß√µes explicativas:
    - qual lista foi usada (original)
    - tamanho, alvo, n√∫mero de compara√ß√µes, resultado e registro encontrado.
    Retorna tuple (√≠ndice, objeto) ou (-1, None) se n√£o encontrado.
    """
    print("\nüîé Busca Sequencial")
    print("- Lista usada: original (n√£o ordenada)")
    print(f"- Tamanho da lista: {len(lista)}")
    print(f"- Alvo: '{nome}'")

    comparacoes = 0
    # percorre cada elemento e compara o campo nome
    for i, insumo in enumerate(lista):
        comparacoes += 1
        if insumo.nome == nome:
            # encontrado: imprime detalhes e retorna
            print(f"- Compara√ß√µes realizadas: {comparacoes}")
            print(f"- Resultado: ENCONTRADO no √≠ndice {i} da lista original.")
            print(f"- Registro: {insumo}")
            return i, insumo

    # n√£o encontrado ap√≥s percorrer toda a lista
    print(f"- Compara√ß√µes realizadas: {comparacoes}")
    print("- Resultado: N√ÉO ENCONTRADO")
    return -1, None


@medir_performance
def busca_binaria(lista_ordenada, nome, lista_original=None):
    """
    Busca bin√°ria em lista ordenada por nome (crescente).
    Par√¢metros:
    - lista_ordenada: lista previamente ordenada (por exemplo: sorted(lista, key=lambda x: x.nome))
    - nome: string com o nome buscado
    - lista_original: lista n√£o ordenada (opcional). Se fornecida, tentamos localizar
      a posi√ß√£o correspondente na lista original usando identidade do objeto (is),
      j√° que sorted preserva refer√™ncias aos mesmos objetos.
    Sa√≠da:
    - imprime n√∫mero de itera√ß√µes, compara√ß√µes e posi√ß√£o na lista ordenada
    - se lista_original fornecida, tamb√©m imprime a posi√ß√£o correspondente nela (se encontrada)
    - retorna (√≠ndice_na_lista_ordenada, objeto) ou (-1, None)
    """
    print("\nüîé Busca Bin√°ria")
    print("- Lista usada: ORDENADA por nome (crescente)")
    print(f"- Tamanho da lista: {len(lista_ordenada)}")
    print(f"- Alvo: '{nome}'")

    esquerda, direita = 0, len(lista_ordenada) - 1
    iteracoes = 0
    comp_igualdade = 0  # conta compara√ß√µes de igualdade (==)
    comp_ordem = 0      # conta compara√ß√µes de ordem (< ou >)

    while esquerda <= direita:
        iteracoes += 1
        meio = (esquerda + direita) // 2
        nome_meio = lista_ordenada[meio].nome

        comp_igualdade += 1
        if nome_meio == nome:
            # encontrado no meio
            item = lista_ordenada[meio]
            idx_ordenada = meio
            idx_original = None

            # se o usu√°rio passou a lista original, procuramos a posi√ß√£o correspondente
            # obs: sorted() mant√©m as mesmas refer√™ncias aos objetos, logo podemos comparar por identidade (is)
            if lista_original is not None:
                for i, obj in enumerate(lista_original):
                    if obj is item:
                        idx_original = i
                        break

            # imprime resultados detalhados
            print(f"- Itera√ß√µes: {iteracoes}")
            print(f"- Compara√ß√µes de igualdade: {comp_igualdade} | de ordem: {comp_ordem}")
            print(f"- Resultado: ENCONTRADO na posi√ß√£o {idx_ordenada} da lista ORDENADA.")
            if idx_original is not None:
                print(f"- Posi√ß√£o correspondente na lista ORIGINAL: {idx_original}")
            print(f"- Registro: {item}")
            return idx_ordenada, item

        # se n√£o igual, ajusta intervalo de busca
        comp_ordem += 1
        if nome_meio < nome:
            esquerda = meio + 1
        else:
            direita = meio - 1

    # n√£o encontrado
    print(f"- Itera√ß√µes: {iteracoes}")
    print(f"- Compara√ß√µes de igualdade: {comp_igualdade} | de ordem: {comp_ordem}")
    print("- Resultado: N√ÉO ENCONTRADO")
    return -1, None


# -------------------------
# ORDENA√á√ÉO
# -------------------------
def merge_sort(lista, chave):
    """
    Implementa√ß√£o recursiva de Merge Sort.
    - lista: lista de objetos
    - chave: fun√ß√£o que extrai o valor de compara√ß√£o (ex.: lambda x: x.quantidade)
    Retorna uma nova lista ordenada.
    """
    if len(lista) <= 1:
        return lista
    meio = len(lista) // 2
    esquerda = merge_sort(lista[:meio], chave)
    direita = merge_sort(lista[meio:], chave)
    return merge(esquerda, direita, chave)


def merge(esq, dir, chave):
    """
    Fun√ß√£o auxiliar para mesclar duas listas j√° ordenadas (esq e dir).
    Usa a fun√ß√£o 'chave' para comparar elementos.
    """
    resultado = []
    i = j = 0
    while i < len(esq) and j < len(dir):
        if chave(esq[i]) <= chave(dir[j]):
            resultado.append(esq[i]); i += 1
        else:
            resultado.append(dir[j]); j += 1
    # anexar o restante de uma das listas
    resultado.extend(esq[i:]); resultado.extend(dir[j:])
    return resultado


def quick_sort(lista, chave):
    """
    Implementa√ß√£o de Quick Sort (vers√£o funcional / n√£o in-place).
    - escolhe um piv√¥ (meio) e particiona em menores/iguais/maiores
    - concatena recursivamente
    Nota: esta implementa√ß√£o cria listas adicionais (n√£o √© in-place),
    mas √© simples e did√°tica.
    """
    if len(lista) <= 1:
        return lista
    pivo = lista[len(lista) // 2]
    iguais  = [x for x in lista if chave(x) == chave(pivo)]
    menores = [x for x in lista if chave(x) <  chave(pivo)]
    maiores = [x for x in lista if chave(x) >  chave(pivo)]
    return quick_sort(menores, chave) + iguais + quick_sort(maiores, chave)


@medir_performance
def ordenar_merge(consumo_diario):
    """
    Wrapper para ordenar por quantidade usando Merge Sort.
    Decorado para medir performance.
    """
    return merge_sort(consumo_diario, lambda x: x.quantidade)


@medir_performance
def ordenar_quick(consumo_diario):
    """
    Wrapper para ordenar por validade usando Quick Sort.
    Decorado para medir performance.
    """
    return quick_sort(consumo_diario, lambda x: x.validade)


# -------------------------
# MENU INTERATIVO
# -------------------------
def menu():
    """
    Menu interativo em loop.
    - permite gerar dados simulados
    - escolher opera√ß√µes: exibir, fila, pilha, buscas, ordena√ß√µes
    - cada opera√ß√£o usa as fun√ß√µes definidas acima
    """
    consumo_diario = gerar_consumo()  # gera dados iniciais
    while True:
        # imprime op√ß√µes do menu
        print("\n=== MENU ===")
        print("1 - Mostrar dados simulados")
        print("2 - Fila (ordem cronol√≥gica)")
        print("3 - Pilha (√∫ltimos consumos)")
        print("4 - Busca Sequencial (explicada)")
        print("5 - Busca Bin√°ria (explicada)")
        print("6 - Ordenar por quantidade (Merge Sort)")
        print("7 - Ordenar por validade (Quick Sort)")
        print("8 - Gerar novos dados simulados")
        print("0 - Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            print("\n--- Dados simulados ---")
            mostrar_lista(consumo_diario)

        elif opcao == "2":
            mostrar_fila(consumo_diario)

        elif opcao == "3":
            mostrar_pilha(consumo_diario)

        elif opcao == "4":
            # busca sequencial (usa lista original)
            nome = input("Digite o nome do insumo para buscar: ")
            idx, item = busca_sequencial(consumo_diario, nome)
            print(f"\n‚Ü©Ô∏è Retorno da fun√ß√£o: {(idx, item)}")

        elif opcao == "5":
            # busca bin√°ria: precisa ordenar por nome antes de chamar
            nome = input("Digite o nome do insumo para buscar: ")
            lista_ordenada = sorted(consumo_diario, key=lambda x: x.nome)
            idx, item = busca_binaria(lista_ordenada, nome, lista_original=consumo_diario)
            print(f"\n‚Ü©Ô∏è Retorno da fun√ß√£o (√≠ndice na lista ORDENADA, objeto): {(idx, item)}")

        elif opcao == "6":
            print("\n--- Ordenado por quantidade (Merge Sort) ---")
            ordenado = ordenar_merge(consumo_diario)
            mostrar_lista(ordenado)

        elif opcao == "7":
            print("\n--- Ordenado por validade (Quick Sort) ---")
            ordenado = ordenar_quick(consumo_diario)
            mostrar_lista(ordenado)

        elif opcao == "8":
            consumo_diario = gerar_consumo()
            print("\n‚úÖ Novos dados simulados gerados!")

        elif opcao == "0":
            print("Encerrando...")
            break

        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")
